/* This file is generated by genxml. */
/* No manual modification is permitted. */

#pragma once







class CResultLoader
{
public:
    struct STResult
    {
        STResult()
        {
            
        }
        
        struct STEnum
        {
            STEnum()
            {
                
                m_strcomment.clear();
                
                m_strname.clear();
                
            }
            
            stringc m_strcomment;
            
            stringc m_strname;
            
            struct STMember
            {
                STMember()
                {
                    
                    m_strcomment.clear();
                    
                    m_strname.clear();
                    
                    m_itype = 0;
                    
                }
                
                stringc m_strcomment;
                
                stringc m_strname;
                
                int32_t m_itype;
                

            };
            
            enum {ENM_Member_Num = 5};
            farray<STMember, ENM_Member_Num> m_vecSTMember;

        };
        
        enum {ENM_Enum_Num = 2};
        farray<STEnum, ENM_Enum_Num> m_vecSTEnum;
        struct STStruct
        {
            STStruct()
            {
                
                m_strcomment.clear();
                
                m_strname.clear();
                
            }
            
            stringc m_strcomment;
            
            stringc m_strname;
            
            struct STMember
            {
                STMember()
                {
                    
                    m_strcomment.clear();
                    
                    m_strname.clear();
                    
                    m_strtype.clear();
                    
                }
                
                stringc m_strcomment;
                
                stringc m_strname;
                
                stringc m_strtype;
                

            };
            
            enum {ENM_Member_Num = 2};
            farray<STMember, ENM_Member_Num> m_vecSTMember;

        };
        
        enum {ENM_Struct_Num = 8};
        farray<STStruct, ENM_Struct_Num> m_vecSTStruct;

    };
    
    const STResult & GetResult()
    {
        return m_STResult;
    }
    
    bool LoadCfg()
	{
		TiXmlDocument document;
		if (!document.LoadFile("sample.xml"))
		{
			MERROR("CResultLoader::LoadCfg(%s) failed", "sample.xml");
			return false;
		}
		
		TiXmlElement* pResult = document.RootElement();
		if (!pResult)
		{
			MERROR("document.RootElement failed");
			return false;
		}
		
		// clear
		STResult tmp;
		m_STResult = tmp;
		
		
		
		
		for (TiXmlNode * pEnum = pResult->FirstChild("Enum"); NULL != pEnum; pEnum = pEnum->NextSibling("Enum"))
		{
			
            STResult::STEnum tmpEnum;
            
            _ReadXMLStringFromAttr(tmpEnum.m_strcomment, (TiXmlElement *)pEnum, "comment");
            MCFG("        comment %s", tmpEnum.m_strcomment.c_str());
            
            _ReadXMLStringFromAttr(tmpEnum.m_strname, (TiXmlElement *)pEnum, "name");
            MCFG("        name %s", tmpEnum.m_strname.c_str());
            
            
            for (TiXmlNode * pMember = pEnum->FirstChild("Member"); NULL != pMember; pMember = pMember->NextSibling("Member"))
            {
            
                STResult::STEnum::STMember tmpMember;
                
                _ReadXMLStringFromAttr(tmpMember.m_strcomment, (TiXmlElement *)pMember, "comment");
                MCFG("            comment %s", tmpMember.m_strcomment.c_str());
                
                _ReadXMLStringFromAttr(tmpMember.m_strname, (TiXmlElement *)pMember, "name");
                MCFG("            name %s", tmpMember.m_strname.c_str());
                
                _ReadXMLNumFromAttr(&tmpMember.m_itype, (TiXmlElement *)pMember, "type");
                MCFG("            type %d", tmpMember.m_itype);
                
                

                tmpEnum.m_vecSTMember.push_back(tmpMember);
            }

			m_STResult.m_vecSTEnum.push_back(tmpEnum);
		}
		for (TiXmlNode * pStruct = pResult->FirstChild("Struct"); NULL != pStruct; pStruct = pStruct->NextSibling("Struct"))
		{
			
            STResult::STStruct tmpStruct;
            
            _ReadXMLStringFromAttr(tmpStruct.m_strcomment, (TiXmlElement *)pStruct, "comment");
            MCFG("        comment %s", tmpStruct.m_strcomment.c_str());
            
            _ReadXMLStringFromAttr(tmpStruct.m_strname, (TiXmlElement *)pStruct, "name");
            MCFG("        name %s", tmpStruct.m_strname.c_str());
            
            
            for (TiXmlNode * pMember = pStruct->FirstChild("Member"); NULL != pMember; pMember = pMember->NextSibling("Member"))
            {
            
                STResult::STStruct::STMember tmpMember;
                
                _ReadXMLStringFromAttr(tmpMember.m_strcomment, (TiXmlElement *)pMember, "comment");
                MCFG("            comment %s", tmpMember.m_strcomment.c_str());
                
                _ReadXMLStringFromAttr(tmpMember.m_strname, (TiXmlElement *)pMember, "name");
                MCFG("            name %s", tmpMember.m_strname.c_str());
                
                _ReadXMLStringFromAttr(tmpMember.m_strtype, (TiXmlElement *)pMember, "type");
                MCFG("            type %s", tmpMember.m_strtype.c_str());
                
                

                tmpStruct.m_vecSTMember.push_back(tmpMember);
            }

			m_STResult.m_vecSTStruct.push_back(tmpStruct);
		}
		
		return true;
	}
    
private:
    STResult m_STResult;
};


