/* This file is generated by genxml. */
/* No manual modification is permitted. */

#pragma once

{{define "SetAttri"}}{{if eq .Type "int"}}m_i{{.Name}} = 0;{{end}}{{if eq .Type "string"}}m_str{{.Name}}.clear();{{end}}{{end}}
{{define "Attri"}}{{if eq .Type "int"}}int32_t m_i{{.Name}};{{end}}{{if eq .Type "string"}}stringc m_str{{.Name}};{{end}}{{end}}
{{define "Token"}}{{add_tab}}{{gen_tab}}struct ST{{.Name}}
{{gen_tab}}{
    {{gen_tab}}ST{{.Name}}()
    {{gen_tab}}{
        {{gen_tab}}{{range .Attributes}}
        {{gen_tab}}{{template "SetAttri" .}}
        {{gen_tab}}{{end}}
    {{gen_tab}}}
    {{gen_tab}}{{range .Attributes}}
    {{gen_tab}}{{template "Attri" .}}
    {{gen_tab}}{{end}}
{{range .Tokens}}{{template "Token" .}}
{{end}}
{{gen_tab}}};
{{gen_tab}}
{{gen_tab}}{{if .IsArray}}enum {ENM_{{.Name}}_Num = {{.Num}}};
{{gen_tab}}farray<ST{{.Name}}, ENM_{{.Name}}_Num> m_vecST{{.Name}};{{else}}ST{{.Name}} m_ST{{.Name}};{{end}}{{dec_tab}}{{end}}

{{define "ReadToken"}}{{add_tab}}
    {{gen_tab}}{{gen_class}}ST{{.Name}} tmp{{.Name}};
    {{gen_tab}}{{$StructName := .Name}}{{range .Attributes}}
    {{gen_tab}}{{if eq .Type "int"}}_ReadXMLNumFromAttr(&tmp{{$StructName}}.m_i{{.Name}}, (TiXmlElement *)p{{$StructName}}, "{{.Name}}");
    {{gen_tab}}MCFG("{{gen_tab}}{{.Name}} %d", tmp{{$StructName}}.m_i{{.Name}});{{end}}{{if eq .Type "string"}}_ReadXMLStringFromAttr(tmp{{$StructName}}.m_str{{.Name}}, (TiXmlElement *)p{{$StructName}}, "{{.Name}}");
    {{gen_tab}}MCFG("{{gen_tab}}{{.Name}} %s", tmp{{$StructName}}.m_str{{.Name}}.c_str());{{end}}
    {{gen_tab}}{{end}}
    {{gen_tab}}{{$StructName := .Name}}{{push_class "ST" .Name}}{{range .Tokens}}
    {{gen_tab}}{{if .IsArray}}for (TiXmlNode * p{{.Name}} = p{{$StructName}}->FirstChild("{{.Name}}"); NULL != p{{.Name}}; p{{.Name}} = p{{.Name}}->NextSibling("{{.Name}}")){{else}}TiXmlNode * p{{.Name}} = p{{$StructName}}->FirstChild("{{.Name}}");
    {{gen_tab}}if (p{{.Name}}){{end}}
    {{gen_tab}}{
    {{gen_tab}}{{template "ReadToken" .}}
        {{gen_tab}}{{if .IsArray}}tmp{{$StructName}}.m_vecST{{.Name}}.push_back(tmp{{.Name}});{{else}}tmp{{$StructName}}.m_ST{{.Name}} = tmp{{.Name}};{{end}}
    {{gen_tab}}}{{end}}
{{dec_tab}}{{pop_class}}{{end}}

class C{{.Name}}Loader
{
public:{{add_tab}}
    struct ST{{.Name}}
    {
        ST{{.Name}}()
        {
            {{range .Attributes}}
            {{template "SetAttri" .}}
            {{end}}
        }
        {{range .Attributes}}
        {{template "Attri" .}}
        {{end}}
{{range .Tokens}}{{template "Token" .}}
{{end}}
    };
    
    const ST{{.Name}} & Get{{.Name}}()
    {
        return m_ST{{.Name}};
    }
    
    bool LoadCfg()
	{
		TiXmlDocument document;
		if (!document.LoadFile("sample.xml"))
		{
			MERROR("C{{.Name}}Loader::LoadCfg(%s) failed", "sample.xml");
			return false;
		}
		
		TiXmlElement* p{{.Name}} = document.RootElement();
		if (!p{{.Name}})
		{
			MERROR("document.RootElement failed");
			return false;
		}
		
		// clear
		ST{{.Name}} tmp;
		m_ST{{.Name}} = tmp;
		
		{{$StructName := .Name}}{{range .Attributes}}
		{{if eq .Type "int"}}_ReadXMLNumFromAttr(&m_ST{{$StructName}}.m_i{{.Name}}, (TiXmlElement *)p{{$StructName}}, "{{.Name}}");
		MCFG("{{.Name}} %d", m_ST{{$StructName}}.m_i{{.Name}});{{end}}{{if eq .Type "string"}}_ReadXMLStringFromAttr(m_ST{{$StructName}}.m_str{{.Name}}, (TiXmlElement *)p{{$StructName}}, "{{.Name}}");
		MCFG("{{.Name}} %s", m_ST{{$StructName}}.m_str{{.Name}}.c_str());{{end}}
		{{end}}
		
		{{$StructName := .Name}}{{push_class "ST" .Name}}{{range .Tokens}}
		{{if .IsArray}}for (TiXmlNode * p{{.Name}} = p{{$StructName}}->FirstChild("{{.Name}}"); NULL != p{{.Name}}; p{{.Name}} = p{{.Name}}->NextSibling("{{.Name}}")){{else}}TiXmlNode * p{{.Name}} = p{{$StructName}}->FirstChild("{{.Name}}");
		if (p{{.Name}}){{end}}
		{
			{{template "ReadToken" .}}
			{{if .IsArray}}m_ST{{$StructName}}.m_vecST{{.Name}}.push_back(tmp{{.Name}});{{else}}m_ST{{$StructName}}.m_ST{{.Name}} = tmp{{.Name}};{{end}}
		}{{end}}
		
		return true;
	}
    
private:
    ST{{.Name}} m_ST{{.Name}};
};


