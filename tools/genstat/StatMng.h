/* This file is generated by genstat. */
/* No manual modification is permitted. */

#pragma once

  
// gamesvrd统计结构
class CGameStatMgr : public Singleton<CGameStatMgr>
{
public:
    CGameStatMgr();
    ~CGameStatMgr();
    
// 操作函数
public:
    int PrintLog(const char * strStatDir);
    
// 属性操作函数
public:
    
    // Get 系统负荷
    uint32_t & GetLoadAvg()
    {
        return m_LoadAvg;
    }
    
    // Set 系统负荷
    void SetLoadAvg(uint32_t _LoadAvg)
    {
        m_LoadAvg = _LoadAvg;
    }
    
    // Add 系统负荷
    void AddLoadAvg(uint32_t _LoadAvg = 1)
    {
        m_LoadAvg += _LoadAvg;
    }
    
    // Get cpu占用
    uint32_t & GetCPU()
    {
        return m_CPU;
    }
    
    // Set cpu占用
    void SetCPU(uint32_t _CPU)
    {
        m_CPU = _CPU;
    }
    
    // Add cpu占用
    void AddCPU(uint32_t _CPU = 1)
    {
        m_CPU += _CPU;
    }
    
    // Get 当前进程的cpu占用
    uint32_t & GetCurCPU()
    {
        return m_CurCPU;
    }
    
    // Set 当前进程的cpu占用
    void SetCurCPU(uint32_t _CurCPU)
    {
        m_CurCPU = _CurCPU;
    }
    
    // Add 当前进程的cpu占用
    void AddCurCPU(uint32_t _CurCPU = 1)
    {
        m_CurCPU += _CurCPU;
    }
    
    // Get 物理内存占用
    uint32_t & GetRES()
    {
        return m_RES;
    }
    
    // Set 物理内存占用
    void SetRES(uint32_t _RES)
    {
        m_RES = _RES;
    }
    
    // Add 物理内存占用
    void AddRES(uint32_t _RES = 1)
    {
        m_RES += _RES;
    }
    
    // Get 虚拟内存占用
    uint32_t & GetVIRT()
    {
        return m_VIRT;
    }
    
    // Set 虚拟内存占用
    void SetVIRT(uint32_t _VIRT)
    {
        m_VIRT = _VIRT;
    }
    
    // Add 虚拟内存占用
    void AddVIRT(uint32_t _VIRT = 1)
    {
        m_VIRT += _VIRT;
    }
    
    // Get 帧率
    uint32_t & GetFPS()
    {
        return m_FPS;
    }
    
    // Set 帧率
    void SetFPS(uint32_t _FPS)
    {
        m_FPS = _FPS;
    }
    
    // Add 帧率
    void AddFPS(uint32_t _FPS = 1)
    {
        m_FPS += _FPS;
    }
    
    
         
	// Set pvp房间 各状态数目
    void SetPvPRoomStateNum(uint32_t index, uint32_t _PvPRoomStateNum)
    {
		if (index >= 7)
        {
            return;
        }
        m_PvPRoomStateNum[index] += _PvPRoomStateNum;
    }
	
    // Add pvp房间 各状态数目
    void AddPvPRoomStateNum(uint32_t index, uint32_t _PvPRoomStateNum = 1)
    {
        if (index >= 7)
        {
            return;
        }
        m_PvPRoomStateNum[index] += _PvPRoomStateNum;
    }
         
	// Set pvp房间 各状态持续时间
    void SetPvPRoomStateTime(uint32_t index, uint32_t _PvPRoomStateTime)
    {
		if (index >= 7)
        {
            return;
        }
        m_PvPRoomStateTime[index] += _PvPRoomStateTime;
    }
	
    // Add pvp房间 各状态持续时间
    void AddPvPRoomStateTime(uint32_t index, uint32_t _PvPRoomStateTime = 1)
    {
        if (index >= 7)
        {
            return;
        }
        m_PvPRoomStateTime[index] += _PvPRoomStateTime;
    }
    
	
          
	// Set client端 Top收包数目
    void SetTopCLRecvPacketNum(uint32_t index, uint32_t _TopCLRecvPacketNum)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLRecvPacketNum[index] += _TopCLRecvPacketNum;
    }
	       
    // Add client端 Top收包数目
    void AddTopCLRecvPacketNum(uint32_t index, uint32_t _TopCLRecvPacketNum = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLRecvPacketNum[index] += _TopCLRecvPacketNum;
    }
          
	// Set client端 Top发包数目
    void SetTopCLSendPacketNum(uint32_t index, uint32_t _TopCLSendPacketNum)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLSendPacketNum[index] += _TopCLSendPacketNum;
    }
	       
    // Add client端 Top发包数目
    void AddTopCLSendPacketNum(uint32_t index, uint32_t _TopCLSendPacketNum = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLSendPacketNum[index] += _TopCLSendPacketNum;
    }
          
	// Set client端 Top收包流量
    void SetTopCLRecvSizeNum(uint32_t index, uint32_t _TopCLRecvSizeNum)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLRecvSizeNum[index] += _TopCLRecvSizeNum;
    }
	       
    // Add client端 Top收包流量
    void AddTopCLRecvSizeNum(uint32_t index, uint32_t _TopCLRecvSizeNum = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLRecvSizeNum[index] += _TopCLRecvSizeNum;
    }
          
	// Set client端 Top发包流量
    void SetTopCLSendSizeNum(uint32_t index, uint32_t _TopCLSendSizeNum)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLSendSizeNum[index] += _TopCLSendSizeNum;
    }
	       
    // Add client端 Top发包流量
    void AddTopCLSendSizeNum(uint32_t index, uint32_t _TopCLSendSizeNum = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLSendSizeNum[index] += _TopCLSendSizeNum;
    }
          
	// Set client端 Top收包处理时间
    void SetTopCLProcessTime(uint32_t index, uint32_t _TopCLProcessTime)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLProcessTime[index] += _TopCLProcessTime;
    }
	       
    // Add client端 Top收包处理时间
    void AddTopCLProcessTime(uint32_t index, uint32_t _TopCLProcessTime = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLProcessTime[index] += _TopCLProcessTime;
    }
    
	
         
	// Set Top场景人数
    void SetTopSceneNum(uint32_t index, uint32_t _TopSceneNum)
    {
		CHashMap<100, uint32_t, uint32_t>::iterator it = m_TopSceneNum.find(index);
        if (it == m_TopSceneNum.end())
        {
            m_TopSceneNum.insert(index, _TopSceneNum);
        }
        else
        {
            uint32_t & val = it->second;
            val = _TopSceneNum;
        }
    }
	        
    // Add Top场景人数
    void AddTopSceneNum(uint32_t index, uint32_t _TopSceneNum = 1)
    {
        CHashMap<100, uint32_t, uint32_t>::iterator it = m_TopSceneNum.find(index);
        if (it == m_TopSceneNum.end())
        {
            m_TopSceneNum.insert(index, _TopSceneNum);
        }
        else
        {
            uint32_t & val = it->second;
            val += _TopSceneNum;
        }
    }
         
	// Set Top副本人数
    void SetTopDungeonNum(uint32_t index, uint32_t _TopDungeonNum)
    {
		CHashMap<100, uint32_t, uint32_t>::iterator it = m_TopDungeonNum.find(index);
        if (it == m_TopDungeonNum.end())
        {
            m_TopDungeonNum.insert(index, _TopDungeonNum);
        }
        else
        {
            uint32_t & val = it->second;
            val = _TopDungeonNum;
        }
    }
	        
    // Add Top副本人数
    void AddTopDungeonNum(uint32_t index, uint32_t _TopDungeonNum = 1)
    {
        CHashMap<100, uint32_t, uint32_t>::iterator it = m_TopDungeonNum.find(index);
        if (it == m_TopDungeonNum.end())
        {
            m_TopDungeonNum.insert(index, _TopDungeonNum);
        }
        else
        {
            uint32_t & val = it->second;
            val += _TopDungeonNum;
        }
    }
    
    
// 内部函数
private:
    void Clear();

// 属性
private:
    
    // 系统负荷
    uint32_t m_LoadAvg;
    
    // cpu占用
    uint32_t m_CPU;
    
    // 当前进程的cpu占用
    uint32_t m_CurCPU;
    
    // 物理内存占用
    uint32_t m_RES;
    
    // 虚拟内存占用
    uint32_t m_VIRT;
    
    // 帧率
    uint32_t m_FPS;
    
    
    // pvp房间 各状态数目
    uint32_t m_PvPRoomStateNum[7];
    
    // pvp房间 各状态持续时间
    uint32_t m_PvPRoomStateTime[7];
    
    
    // client端 Top收包数目
    uint32_t m_TopCLRecvPacketNum[2000];
    
    // client端 Top发包数目
    uint32_t m_TopCLSendPacketNum[2000];
    
    // client端 Top收包流量
    uint32_t m_TopCLRecvSizeNum[2000];
    
    // client端 Top发包流量
    uint32_t m_TopCLSendSizeNum[2000];
    
    // client端 Top收包处理时间
    uint32_t m_TopCLProcessTime[2000];
        
    
    // Top场景人数
    CHashMap<100, uint32_t, uint32_t> m_TopSceneNum;
    
    // Top副本人数
    CHashMap<100, uint32_t, uint32_t> m_TopDungeonNum;
        
};
  
// dbsvrd统计结构
class CDBStatMgr : public Singleton<CDBStatMgr>
{
public:
    CDBStatMgr();
    ~CDBStatMgr();
    
// 操作函数
public:
    int PrintLog(const char * strStatDir);
    
// 属性操作函数
public:
    
    // Get 系统负荷
    uint32_t & GetLoadAvg()
    {
        return m_LoadAvg;
    }
    
    // Set 系统负荷
    void SetLoadAvg(uint32_t _LoadAvg)
    {
        m_LoadAvg = _LoadAvg;
    }
    
    // Add 系统负荷
    void AddLoadAvg(uint32_t _LoadAvg = 1)
    {
        m_LoadAvg += _LoadAvg;
    }
    
    // Get cpu占用
    uint32_t & GetCPU()
    {
        return m_CPU;
    }
    
    // Set cpu占用
    void SetCPU(uint32_t _CPU)
    {
        m_CPU = _CPU;
    }
    
    // Add cpu占用
    void AddCPU(uint32_t _CPU = 1)
    {
        m_CPU += _CPU;
    }
    
    // Get 当前进程的cpu占用
    uint32_t & GetCurCPU()
    {
        return m_CurCPU;
    }
    
    // Set 当前进程的cpu占用
    void SetCurCPU(uint32_t _CurCPU)
    {
        m_CurCPU = _CurCPU;
    }
    
    // Add 当前进程的cpu占用
    void AddCurCPU(uint32_t _CurCPU = 1)
    {
        m_CurCPU += _CurCPU;
    }
    
    // Get 物理内存占用
    uint32_t & GetRES()
    {
        return m_RES;
    }
    
    // Set 物理内存占用
    void SetRES(uint32_t _RES)
    {
        m_RES = _RES;
    }
    
    // Add 物理内存占用
    void AddRES(uint32_t _RES = 1)
    {
        m_RES += _RES;
    }
    
    // Get 虚拟内存占用
    uint32_t & GetVIRT()
    {
        return m_VIRT;
    }
    
    // Set 虚拟内存占用
    void SetVIRT(uint32_t _VIRT)
    {
        m_VIRT = _VIRT;
    }
    
    // Add 虚拟内存占用
    void AddVIRT(uint32_t _VIRT = 1)
    {
        m_VIRT += _VIRT;
    }
    
    // Get 帧率
    uint32_t & GetFPS()
    {
        return m_FPS;
    }
    
    // Set 帧率
    void SetFPS(uint32_t _FPS)
    {
        m_FPS = _FPS;
    }
    
    // Add 帧率
    void AddFPS(uint32_t _FPS = 1)
    {
        m_FPS += _FPS;
    }
    
    
         
	// Set 每个Handle帧率
    void SetPerHandleFPS(uint32_t index, uint32_t _PerHandleFPS)
    {
		if (index >= 8)
        {
            return;
        }
        m_PerHandleFPS[index] += _PerHandleFPS;
    }
	
    // Add 每个Handle帧率
    void AddPerHandleFPS(uint32_t index, uint32_t _PerHandleFPS = 1)
    {
        if (index >= 8)
        {
            return;
        }
        m_PerHandleFPS[index] += _PerHandleFPS;
    }
    
	
          
	// Set Top DBExecutor帧率
    void SetTopExecutorFPS(uint32_t index, uint32_t _TopExecutorFPS)
    {
		if (index >= 100)
        {
            return;
        }
        m_TopExecutorFPS[index] += _TopExecutorFPS;
    }
	       
    // Add Top DBExecutor帧率
    void AddTopExecutorFPS(uint32_t index, uint32_t _TopExecutorFPS = 1)
    {
        if (index >= 100)
        {
            return;
        }
        m_TopExecutorFPS[index] += _TopExecutorFPS;
    }
    
	
    
    
// 内部函数
private:
    void Clear();

// 属性
private:
    
    // 系统负荷
    uint32_t m_LoadAvg;
    
    // cpu占用
    uint32_t m_CPU;
    
    // 当前进程的cpu占用
    uint32_t m_CurCPU;
    
    // 物理内存占用
    uint32_t m_RES;
    
    // 虚拟内存占用
    uint32_t m_VIRT;
    
    // 帧率
    uint32_t m_FPS;
    
    
    // 每个Handle帧率
    uint32_t m_PerHandleFPS[8];
    
    
    // Top DBExecutor帧率
    uint32_t m_TopExecutorFPS[100];
        
        
};

