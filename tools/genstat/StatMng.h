/* This file is generated by genstat. */
/* No manual modification is permitted. */

#pragma once

  
// gamesvrd统计结构
class CGameStatMng : public singleton<CGameStatMng>
{
public:
	// gamesvrd统计结构
    CGameStatMng()
	{
		Clear();
	}
	// gamesvrd统计结构
    ~CGameStatMng()
	{
		Clear();
	}
		
	void SortArray(uint32_t * src, int srcSize, uint32_t * desId, uint32_t * desVal, int desSize, bool isMax)
	{
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t max = 0;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] > max)
					{
						desId[i] = j;
						desVal[i] = src[j];
						max = src[j];
					}
				}
				src[desId[i]] = 0;
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t min = 0xFFFFFFFF;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] < min && src[j] > 0)
					{
						desId[i] = j;
						desVal[i] = src[j];
						min = src[j];
					}
				}
				src[desId[i]] = 0xFFFFFFFF;
			}
		}
	}

	template <typename Map>
	void SortHashMap(Map & map, uint32_t * desId, uint32_t * desVal, int desSize, bool isMax)
	{
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t max = 0;
				for (typename Map::iterator it = map.begin(); it != map.end(); it++)
				{
					if (it->second > max)
					{
						desId[i] = it->first;
						desVal[i] = it->second;
						max = it->second;
					}
				}
				typename Map::iterator it = map.find(desId[i]);
				if (it != map.end())
				{
					it->second = 0;
				}
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t min = 0xFFFFFFFF;
				for (typename Map::iterator it = map.begin(); it != map.end(); it++)
				{
					if (it->second < min && it->second > 0)
					{
						desId[i] = it->first;
						desVal[i] = it->second;
						min = it->second;
					}
				}
				typename Map::iterator it = map.find(desId[i]);
				if (it != map.end())
				{
					it->second = 0xFFFFFFFF;
				}
			}
		}
	}
		
// 操作函数
public:
    int PrintLog(const char * strFile)
	{
		FILE *pLog = NULL;
		if ((pLog = fopen(strFile, "a+")) == NULL)
		{
			LOG_ERROR("open %s fail", strFile);
			return -2;
		}
		
		
		// client端 Top收包数目
		uint32_t uTopCLRecvPacketNumId[5] = {0};
		uint32_t uTopCLRecvPacketNumVal[5] = {0};
		SortArray(m_TopCLRecvPacketNum, 2000, uTopCLRecvPacketNumId, uTopCLRecvPacketNumVal, 5, true);
		
		// client端 Top发包数目
		uint32_t uTopCLSendPacketNumId[5] = {0};
		uint32_t uTopCLSendPacketNumVal[5] = {0};
		SortArray(m_TopCLSendPacketNum, 2000, uTopCLSendPacketNumId, uTopCLSendPacketNumVal, 5, true);
		
		// client端 Top收包流量
		uint32_t uTopCLRecvSizeNumId[5] = {0};
		uint32_t uTopCLRecvSizeNumVal[5] = {0};
		SortArray(m_TopCLRecvSizeNum, 2000, uTopCLRecvSizeNumId, uTopCLRecvSizeNumVal, 5, true);
		
		// client端 Top发包流量
		uint32_t uTopCLSendSizeNumId[5] = {0};
		uint32_t uTopCLSendSizeNumVal[5] = {0};
		SortArray(m_TopCLSendSizeNum, 2000, uTopCLSendSizeNumId, uTopCLSendSizeNumVal, 5, true);
		
		// client端 Top收包处理时间
		uint32_t uTopCLProcessTimeId[5] = {0};
		uint32_t uTopCLProcessTimeVal[5] = {0};
		SortArray(m_TopCLProcessTime, 2000, uTopCLProcessTimeId, uTopCLProcessTimeVal, 5, true);
		
		
		// Top场景人数
		uint32_t uTopSceneNumId[5] = {0};
		uint32_t uTopSceneNumVal[5] = {0};
		SortHashMap< fhashmap<uint32_t, uint32_t, 100> >(m_TopSceneNum, uTopSceneNumId, uTopSceneNumVal, 5, true);
		
		// Top副本人数
		uint32_t uTopDungeonNumId[5] = {0};
		uint32_t uTopDungeonNumVal[5] = {0};
		SortHashMap< fhashmap<uint32_t, uint32_t, 100> >(m_TopDungeonNum, uTopDungeonNumId, uTopDungeonNumVal, 5, true);
		
		
		fprintf(pLog, "=============================%s=============================\n"
			
			// 系统负荷
			"LoadAvg\t%u\t系统负荷\n"
			
			// cpu占用
			"CPU\t%u\tcpu占用\n"
			
			// 当前进程的cpu占用
			"CurCPU\t%u\t当前进程的cpu占用\n"
			
			// 物理内存占用
			"RES\t%u\t物理内存占用\n"
			
			// 虚拟内存占用
			"VIRT\t%u\t虚拟内存占用\n"
			
			// 帧率
			"FPS\t%u\t帧率\n"
			
			
			
			// pvp房间 各状态数目 0
			"PvPRoomStateNum0\t%u\tpvp房间 各状态数目0\n"
			
			// pvp房间 各状态数目 1
			"PvPRoomStateNum1\t%u\tpvp房间 各状态数目1\n"
			
			// pvp房间 各状态数目 2
			"PvPRoomStateNum2\t%u\tpvp房间 各状态数目2\n"
			
			// pvp房间 各状态数目 3
			"PvPRoomStateNum3\t%u\tpvp房间 各状态数目3\n"
			
			// pvp房间 各状态数目 4
			"PvPRoomStateNum4\t%u\tpvp房间 各状态数目4\n"
			
			// pvp房间 各状态数目 5
			"PvPRoomStateNum5\t%u\tpvp房间 各状态数目5\n"
			
			// pvp房间 各状态数目 6
			"PvPRoomStateNum6\t%u\tpvp房间 各状态数目6\n"
			
			
			
			// pvp房间 各状态持续时间 0
			"PvPRoomStateTime0\t%u\tpvp房间 各状态持续时间0\n"
			
			// pvp房间 各状态持续时间 1
			"PvPRoomStateTime1\t%u\tpvp房间 各状态持续时间1\n"
			
			// pvp房间 各状态持续时间 2
			"PvPRoomStateTime2\t%u\tpvp房间 各状态持续时间2\n"
			
			// pvp房间 各状态持续时间 3
			"PvPRoomStateTime3\t%u\tpvp房间 各状态持续时间3\n"
			
			// pvp房间 各状态持续时间 4
			"PvPRoomStateTime4\t%u\tpvp房间 各状态持续时间4\n"
			
			// pvp房间 各状态持续时间 5
			"PvPRoomStateTime5\t%u\tpvp房间 各状态持续时间5\n"
			
			// pvp房间 各状态持续时间 6
			"PvPRoomStateTime6\t%u\tpvp房间 各状态持续时间6\n"
			
			
			
			
			// client端 Top收包数目 0
			"TopCLRecvPacketNumId0\t%u\tclient端 Top收包数目Id0\nTopCLRecvPacketNumVal0\t%u\tclient端 Top收包数目Val0\n"
			
			// client端 Top收包数目 1
			"TopCLRecvPacketNumId1\t%u\tclient端 Top收包数目Id1\nTopCLRecvPacketNumVal1\t%u\tclient端 Top收包数目Val1\n"
			
			// client端 Top收包数目 2
			"TopCLRecvPacketNumId2\t%u\tclient端 Top收包数目Id2\nTopCLRecvPacketNumVal2\t%u\tclient端 Top收包数目Val2\n"
			
			// client端 Top收包数目 3
			"TopCLRecvPacketNumId3\t%u\tclient端 Top收包数目Id3\nTopCLRecvPacketNumVal3\t%u\tclient端 Top收包数目Val3\n"
			
			// client端 Top收包数目 4
			"TopCLRecvPacketNumId4\t%u\tclient端 Top收包数目Id4\nTopCLRecvPacketNumVal4\t%u\tclient端 Top收包数目Val4\n"
			
			
			
			// client端 Top发包数目 0
			"TopCLSendPacketNumId0\t%u\tclient端 Top发包数目Id0\nTopCLSendPacketNumVal0\t%u\tclient端 Top发包数目Val0\n"
			
			// client端 Top发包数目 1
			"TopCLSendPacketNumId1\t%u\tclient端 Top发包数目Id1\nTopCLSendPacketNumVal1\t%u\tclient端 Top发包数目Val1\n"
			
			// client端 Top发包数目 2
			"TopCLSendPacketNumId2\t%u\tclient端 Top发包数目Id2\nTopCLSendPacketNumVal2\t%u\tclient端 Top发包数目Val2\n"
			
			// client端 Top发包数目 3
			"TopCLSendPacketNumId3\t%u\tclient端 Top发包数目Id3\nTopCLSendPacketNumVal3\t%u\tclient端 Top发包数目Val3\n"
			
			// client端 Top发包数目 4
			"TopCLSendPacketNumId4\t%u\tclient端 Top发包数目Id4\nTopCLSendPacketNumVal4\t%u\tclient端 Top发包数目Val4\n"
			
			
			
			// client端 Top收包流量 0
			"TopCLRecvSizeNumId0\t%u\tclient端 Top收包流量Id0\nTopCLRecvSizeNumVal0\t%u\tclient端 Top收包流量Val0\n"
			
			// client端 Top收包流量 1
			"TopCLRecvSizeNumId1\t%u\tclient端 Top收包流量Id1\nTopCLRecvSizeNumVal1\t%u\tclient端 Top收包流量Val1\n"
			
			// client端 Top收包流量 2
			"TopCLRecvSizeNumId2\t%u\tclient端 Top收包流量Id2\nTopCLRecvSizeNumVal2\t%u\tclient端 Top收包流量Val2\n"
			
			// client端 Top收包流量 3
			"TopCLRecvSizeNumId3\t%u\tclient端 Top收包流量Id3\nTopCLRecvSizeNumVal3\t%u\tclient端 Top收包流量Val3\n"
			
			// client端 Top收包流量 4
			"TopCLRecvSizeNumId4\t%u\tclient端 Top收包流量Id4\nTopCLRecvSizeNumVal4\t%u\tclient端 Top收包流量Val4\n"
			
			
			
			// client端 Top发包流量 0
			"TopCLSendSizeNumId0\t%u\tclient端 Top发包流量Id0\nTopCLSendSizeNumVal0\t%u\tclient端 Top发包流量Val0\n"
			
			// client端 Top发包流量 1
			"TopCLSendSizeNumId1\t%u\tclient端 Top发包流量Id1\nTopCLSendSizeNumVal1\t%u\tclient端 Top发包流量Val1\n"
			
			// client端 Top发包流量 2
			"TopCLSendSizeNumId2\t%u\tclient端 Top发包流量Id2\nTopCLSendSizeNumVal2\t%u\tclient端 Top发包流量Val2\n"
			
			// client端 Top发包流量 3
			"TopCLSendSizeNumId3\t%u\tclient端 Top发包流量Id3\nTopCLSendSizeNumVal3\t%u\tclient端 Top发包流量Val3\n"
			
			// client端 Top发包流量 4
			"TopCLSendSizeNumId4\t%u\tclient端 Top发包流量Id4\nTopCLSendSizeNumVal4\t%u\tclient端 Top发包流量Val4\n"
			
			
			
			// client端 Top收包处理时间 0
			"TopCLProcessTimeId0\t%u\tclient端 Top收包处理时间Id0\nTopCLProcessTimeVal0\t%u\tclient端 Top收包处理时间Val0\n"
			
			// client端 Top收包处理时间 1
			"TopCLProcessTimeId1\t%u\tclient端 Top收包处理时间Id1\nTopCLProcessTimeVal1\t%u\tclient端 Top收包处理时间Val1\n"
			
			// client端 Top收包处理时间 2
			"TopCLProcessTimeId2\t%u\tclient端 Top收包处理时间Id2\nTopCLProcessTimeVal2\t%u\tclient端 Top收包处理时间Val2\n"
			
			// client端 Top收包处理时间 3
			"TopCLProcessTimeId3\t%u\tclient端 Top收包处理时间Id3\nTopCLProcessTimeVal3\t%u\tclient端 Top收包处理时间Val3\n"
			
			// client端 Top收包处理时间 4
			"TopCLProcessTimeId4\t%u\tclient端 Top收包处理时间Id4\nTopCLProcessTimeVal4\t%u\tclient端 Top收包处理时间Val4\n"
			
			
			
			
			// Top场景人数 0
			"TopSceneNumId0\t%u\tTop场景人数Id0\nTopSceneNumVal0\t%u\tTop场景人数Val0\n"
			
			// Top场景人数 1
			"TopSceneNumId1\t%u\tTop场景人数Id1\nTopSceneNumVal1\t%u\tTop场景人数Val1\n"
			
			// Top场景人数 2
			"TopSceneNumId2\t%u\tTop场景人数Id2\nTopSceneNumVal2\t%u\tTop场景人数Val2\n"
			
			// Top场景人数 3
			"TopSceneNumId3\t%u\tTop场景人数Id3\nTopSceneNumVal3\t%u\tTop场景人数Val3\n"
			
			// Top场景人数 4
			"TopSceneNumId4\t%u\tTop场景人数Id4\nTopSceneNumVal4\t%u\tTop场景人数Val4\n"
			
			
			
			// Top副本人数 0
			"TopDungeonNumId0\t%u\tTop副本人数Id0\nTopDungeonNumVal0\t%u\tTop副本人数Val0\n"
			
			// Top副本人数 1
			"TopDungeonNumId1\t%u\tTop副本人数Id1\nTopDungeonNumVal1\t%u\tTop副本人数Val1\n"
			
			// Top副本人数 2
			"TopDungeonNumId2\t%u\tTop副本人数Id2\nTopDungeonNumVal2\t%u\tTop副本人数Val2\n"
			
			// Top副本人数 3
			"TopDungeonNumId3\t%u\tTop副本人数Id3\nTopDungeonNumVal3\t%u\tTop副本人数Val3\n"
			
			// Top副本人数 4
			"TopDungeonNumId4\t%u\tTop副本人数Id4\nTopDungeonNumVal4\t%u\tTop副本人数Val4\n"
			
			
			"\n"
			
			, (const char *)fclock::ptr()->nowstr()
			
			// 系统负荷
			, m_LoadAvg
			
			// cpu占用
			, m_CPU
			
			// 当前进程的cpu占用
			, m_CurCPU
			
			// 物理内存占用
			, m_RES
			
			// 虚拟内存占用
			, m_VIRT
			
			// 帧率
			, m_FPS
			
			
			
			// pvp房间 各状态数目 0
			, m_PvPRoomStateNum[0]
			
			// pvp房间 各状态数目 1
			, m_PvPRoomStateNum[1]
			
			// pvp房间 各状态数目 2
			, m_PvPRoomStateNum[2]
			
			// pvp房间 各状态数目 3
			, m_PvPRoomStateNum[3]
			
			// pvp房间 各状态数目 4
			, m_PvPRoomStateNum[4]
			
			// pvp房间 各状态数目 5
			, m_PvPRoomStateNum[5]
			
			// pvp房间 各状态数目 6
			, m_PvPRoomStateNum[6]
			
			
			
			// pvp房间 各状态持续时间 0
			, m_PvPRoomStateTime[0]
			
			// pvp房间 各状态持续时间 1
			, m_PvPRoomStateTime[1]
			
			// pvp房间 各状态持续时间 2
			, m_PvPRoomStateTime[2]
			
			// pvp房间 各状态持续时间 3
			, m_PvPRoomStateTime[3]
			
			// pvp房间 各状态持续时间 4
			, m_PvPRoomStateTime[4]
			
			// pvp房间 各状态持续时间 5
			, m_PvPRoomStateTime[5]
			
			// pvp房间 各状态持续时间 6
			, m_PvPRoomStateTime[6]
			
			
			
			
			// client端 Top收包数目 0
			, uTopCLRecvPacketNumId[0], uTopCLRecvPacketNumVal[0]
			
			// client端 Top收包数目 1
			, uTopCLRecvPacketNumId[1], uTopCLRecvPacketNumVal[1]
			
			// client端 Top收包数目 2
			, uTopCLRecvPacketNumId[2], uTopCLRecvPacketNumVal[2]
			
			// client端 Top收包数目 3
			, uTopCLRecvPacketNumId[3], uTopCLRecvPacketNumVal[3]
			
			// client端 Top收包数目 4
			, uTopCLRecvPacketNumId[4], uTopCLRecvPacketNumVal[4]
			
			
			
			// client端 Top发包数目 0
			, uTopCLSendPacketNumId[0], uTopCLSendPacketNumVal[0]
			
			// client端 Top发包数目 1
			, uTopCLSendPacketNumId[1], uTopCLSendPacketNumVal[1]
			
			// client端 Top发包数目 2
			, uTopCLSendPacketNumId[2], uTopCLSendPacketNumVal[2]
			
			// client端 Top发包数目 3
			, uTopCLSendPacketNumId[3], uTopCLSendPacketNumVal[3]
			
			// client端 Top发包数目 4
			, uTopCLSendPacketNumId[4], uTopCLSendPacketNumVal[4]
			
			
			
			// client端 Top收包流量 0
			, uTopCLRecvSizeNumId[0], uTopCLRecvSizeNumVal[0]
			
			// client端 Top收包流量 1
			, uTopCLRecvSizeNumId[1], uTopCLRecvSizeNumVal[1]
			
			// client端 Top收包流量 2
			, uTopCLRecvSizeNumId[2], uTopCLRecvSizeNumVal[2]
			
			// client端 Top收包流量 3
			, uTopCLRecvSizeNumId[3], uTopCLRecvSizeNumVal[3]
			
			// client端 Top收包流量 4
			, uTopCLRecvSizeNumId[4], uTopCLRecvSizeNumVal[4]
			
			
			
			// client端 Top发包流量 0
			, uTopCLSendSizeNumId[0], uTopCLSendSizeNumVal[0]
			
			// client端 Top发包流量 1
			, uTopCLSendSizeNumId[1], uTopCLSendSizeNumVal[1]
			
			// client端 Top发包流量 2
			, uTopCLSendSizeNumId[2], uTopCLSendSizeNumVal[2]
			
			// client端 Top发包流量 3
			, uTopCLSendSizeNumId[3], uTopCLSendSizeNumVal[3]
			
			// client端 Top发包流量 4
			, uTopCLSendSizeNumId[4], uTopCLSendSizeNumVal[4]
			
			
			
			// client端 Top收包处理时间 0
			, uTopCLProcessTimeId[0], uTopCLProcessTimeVal[0]
			
			// client端 Top收包处理时间 1
			, uTopCLProcessTimeId[1], uTopCLProcessTimeVal[1]
			
			// client端 Top收包处理时间 2
			, uTopCLProcessTimeId[2], uTopCLProcessTimeVal[2]
			
			// client端 Top收包处理时间 3
			, uTopCLProcessTimeId[3], uTopCLProcessTimeVal[3]
			
			// client端 Top收包处理时间 4
			, uTopCLProcessTimeId[4], uTopCLProcessTimeVal[4]
			
			
			
			
			// Top场景人数 0
			, uTopSceneNumId[0], uTopSceneNumVal[0]
			
			// Top场景人数 1
			, uTopSceneNumId[1], uTopSceneNumVal[1]
			
			// Top场景人数 2
			, uTopSceneNumId[2], uTopSceneNumVal[2]
			
			// Top场景人数 3
			, uTopSceneNumId[3], uTopSceneNumVal[3]
			
			// Top场景人数 4
			, uTopSceneNumId[4], uTopSceneNumVal[4]
			
			
			
			// Top副本人数 0
			, uTopDungeonNumId[0], uTopDungeonNumVal[0]
			
			// Top副本人数 1
			, uTopDungeonNumId[1], uTopDungeonNumVal[1]
			
			// Top副本人数 2
			, uTopDungeonNumId[2], uTopDungeonNumVal[2]
			
			// Top副本人数 3
			, uTopDungeonNumId[3], uTopDungeonNumVal[3]
			
			// Top副本人数 4
			, uTopDungeonNumId[4], uTopDungeonNumVal[4]
			
			
			);
			
		fclose(pLog);
		
		Clear();

		return 0;
	}
    
// 属性操作函数
public:
    
    // Get 系统负荷
    uint32_t & GetLoadAvg()
    {
        return m_LoadAvg;
    }
    
    // Set 系统负荷
    void SetLoadAvg(uint32_t _LoadAvg)
    {
        m_LoadAvg = _LoadAvg;
    }
    
    // Add 系统负荷
    void AddLoadAvg(uint32_t _LoadAvg = 1)
    {
        m_LoadAvg += _LoadAvg;
    }
    
    // Get cpu占用
    uint32_t & GetCPU()
    {
        return m_CPU;
    }
    
    // Set cpu占用
    void SetCPU(uint32_t _CPU)
    {
        m_CPU = _CPU;
    }
    
    // Add cpu占用
    void AddCPU(uint32_t _CPU = 1)
    {
        m_CPU += _CPU;
    }
    
    // Get 当前进程的cpu占用
    uint32_t & GetCurCPU()
    {
        return m_CurCPU;
    }
    
    // Set 当前进程的cpu占用
    void SetCurCPU(uint32_t _CurCPU)
    {
        m_CurCPU = _CurCPU;
    }
    
    // Add 当前进程的cpu占用
    void AddCurCPU(uint32_t _CurCPU = 1)
    {
        m_CurCPU += _CurCPU;
    }
    
    // Get 物理内存占用
    uint32_t & GetRES()
    {
        return m_RES;
    }
    
    // Set 物理内存占用
    void SetRES(uint32_t _RES)
    {
        m_RES = _RES;
    }
    
    // Add 物理内存占用
    void AddRES(uint32_t _RES = 1)
    {
        m_RES += _RES;
    }
    
    // Get 虚拟内存占用
    uint32_t & GetVIRT()
    {
        return m_VIRT;
    }
    
    // Set 虚拟内存占用
    void SetVIRT(uint32_t _VIRT)
    {
        m_VIRT = _VIRT;
    }
    
    // Add 虚拟内存占用
    void AddVIRT(uint32_t _VIRT = 1)
    {
        m_VIRT += _VIRT;
    }
    
    // Get 帧率
    uint32_t & GetFPS()
    {
        return m_FPS;
    }
    
    // Set 帧率
    void SetFPS(uint32_t _FPS)
    {
        m_FPS = _FPS;
    }
    
    // Add 帧率
    void AddFPS(uint32_t _FPS = 1)
    {
        m_FPS += _FPS;
    }
    
    
         
	// Set pvp房间 各状态数目
    void SetPvPRoomStateNum(uint32_t index, uint32_t _PvPRoomStateNum)
    {
		if (index >= 7)
        {
            return;
        }
        m_PvPRoomStateNum[index] += _PvPRoomStateNum;
    }
	
    // Add pvp房间 各状态数目
    void AddPvPRoomStateNum(uint32_t index, uint32_t _PvPRoomStateNum = 1)
    {
        if (index >= 7)
        {
            return;
        }
        m_PvPRoomStateNum[index] += _PvPRoomStateNum;
    }
         
	// Set pvp房间 各状态持续时间
    void SetPvPRoomStateTime(uint32_t index, uint32_t _PvPRoomStateTime)
    {
		if (index >= 7)
        {
            return;
        }
        m_PvPRoomStateTime[index] += _PvPRoomStateTime;
    }
	
    // Add pvp房间 各状态持续时间
    void AddPvPRoomStateTime(uint32_t index, uint32_t _PvPRoomStateTime = 1)
    {
        if (index >= 7)
        {
            return;
        }
        m_PvPRoomStateTime[index] += _PvPRoomStateTime;
    }
    
	
          
	// Set client端 Top收包数目
    void SetTopCLRecvPacketNum(uint32_t index, uint32_t _TopCLRecvPacketNum)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLRecvPacketNum[index] += _TopCLRecvPacketNum;
    }
	       
    // Add client端 Top收包数目
    void AddTopCLRecvPacketNum(uint32_t index, uint32_t _TopCLRecvPacketNum = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLRecvPacketNum[index] += _TopCLRecvPacketNum;
    }
          
	// Set client端 Top发包数目
    void SetTopCLSendPacketNum(uint32_t index, uint32_t _TopCLSendPacketNum)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLSendPacketNum[index] += _TopCLSendPacketNum;
    }
	       
    // Add client端 Top发包数目
    void AddTopCLSendPacketNum(uint32_t index, uint32_t _TopCLSendPacketNum = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLSendPacketNum[index] += _TopCLSendPacketNum;
    }
          
	// Set client端 Top收包流量
    void SetTopCLRecvSizeNum(uint32_t index, uint32_t _TopCLRecvSizeNum)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLRecvSizeNum[index] += _TopCLRecvSizeNum;
    }
	       
    // Add client端 Top收包流量
    void AddTopCLRecvSizeNum(uint32_t index, uint32_t _TopCLRecvSizeNum = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLRecvSizeNum[index] += _TopCLRecvSizeNum;
    }
          
	// Set client端 Top发包流量
    void SetTopCLSendSizeNum(uint32_t index, uint32_t _TopCLSendSizeNum)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLSendSizeNum[index] += _TopCLSendSizeNum;
    }
	       
    // Add client端 Top发包流量
    void AddTopCLSendSizeNum(uint32_t index, uint32_t _TopCLSendSizeNum = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLSendSizeNum[index] += _TopCLSendSizeNum;
    }
          
	// Set client端 Top收包处理时间
    void SetTopCLProcessTime(uint32_t index, uint32_t _TopCLProcessTime)
    {
		if (index >= 2000)
        {
            return;
        }
        m_TopCLProcessTime[index] += _TopCLProcessTime;
    }
	       
    // Add client端 Top收包处理时间
    void AddTopCLProcessTime(uint32_t index, uint32_t _TopCLProcessTime = 1)
    {
        if (index >= 2000)
        {
            return;
        }
        m_TopCLProcessTime[index] += _TopCLProcessTime;
    }
    
	
         
	// Set Top场景人数
    void SetTopSceneNum(uint32_t index, uint32_t _TopSceneNum)
    {
		fhashmap<uint32_t, uint32_t, 100>::iterator it = m_TopSceneNum.find(index);
        if (it == m_TopSceneNum.end())
        {
            m_TopSceneNum.insert(index, _TopSceneNum);
        }
        else
        {
            uint32_t & val = it->second;
            val = _TopSceneNum;
        }
    }
	        
    // Add Top场景人数
    void AddTopSceneNum(uint32_t index, uint32_t _TopSceneNum = 1)
    {
        fhashmap<uint32_t, uint32_t, 100>::iterator it = m_TopSceneNum.find(index);
        if (it == m_TopSceneNum.end())
        {
            m_TopSceneNum.insert(index, _TopSceneNum);
        }
        else
        {
            uint32_t & val = it->second;
            val += _TopSceneNum;
        }
    }
         
	// Set Top副本人数
    void SetTopDungeonNum(uint32_t index, uint32_t _TopDungeonNum)
    {
		fhashmap<uint32_t, uint32_t, 100>::iterator it = m_TopDungeonNum.find(index);
        if (it == m_TopDungeonNum.end())
        {
            m_TopDungeonNum.insert(index, _TopDungeonNum);
        }
        else
        {
            uint32_t & val = it->second;
            val = _TopDungeonNum;
        }
    }
	        
    // Add Top副本人数
    void AddTopDungeonNum(uint32_t index, uint32_t _TopDungeonNum = 1)
    {
        fhashmap<uint32_t, uint32_t, 100>::iterator it = m_TopDungeonNum.find(index);
        if (it == m_TopDungeonNum.end())
        {
            m_TopDungeonNum.insert(index, _TopDungeonNum);
        }
        else
        {
            uint32_t & val = it->second;
            val += _TopDungeonNum;
        }
    }
    
    
// 内部函数
private:
    void Clear()
	{
		
		// 系统负荷
		m_LoadAvg = 0;
		
		// cpu占用
		m_CPU = 0;
		
		// 当前进程的cpu占用
		m_CurCPU = 0;
		
		// 物理内存占用
		m_RES = 0;
		
		// 虚拟内存占用
		m_VIRT = 0;
		
		// 帧率
		m_FPS = 0;
		
		
		// pvp房间 各状态数目
		memset(m_PvPRoomStateNum, 0, sizeof(m_PvPRoomStateNum));
		
		// pvp房间 各状态持续时间
		memset(m_PvPRoomStateTime, 0, sizeof(m_PvPRoomStateTime));
		
		
		// client端 Top收包数目
		memset(m_TopCLRecvPacketNum, 0, sizeof(m_TopCLRecvPacketNum));
		
		// client端 Top发包数目
		memset(m_TopCLSendPacketNum, 0, sizeof(m_TopCLSendPacketNum));
		
		// client端 Top收包流量
		memset(m_TopCLRecvSizeNum, 0, sizeof(m_TopCLRecvSizeNum));
		
		// client端 Top发包流量
		memset(m_TopCLSendSizeNum, 0, sizeof(m_TopCLSendSizeNum));
		
		// client端 Top收包处理时间
		memset(m_TopCLProcessTime, 0, sizeof(m_TopCLProcessTime));
		
		
		// Top场景人数
		m_TopSceneNum.clear();
		
		// Top副本人数
		m_TopDungeonNum.clear();
		
	}

// 属性
private:
    
    // 系统负荷
    uint32_t m_LoadAvg;
    
    // cpu占用
    uint32_t m_CPU;
    
    // 当前进程的cpu占用
    uint32_t m_CurCPU;
    
    // 物理内存占用
    uint32_t m_RES;
    
    // 虚拟内存占用
    uint32_t m_VIRT;
    
    // 帧率
    uint32_t m_FPS;
    
    
    // pvp房间 各状态数目
    uint32_t m_PvPRoomStateNum[7];
    
    // pvp房间 各状态持续时间
    uint32_t m_PvPRoomStateTime[7];
    
    
    // client端 Top收包数目
    uint32_t m_TopCLRecvPacketNum[2000];
    
    // client端 Top发包数目
    uint32_t m_TopCLSendPacketNum[2000];
    
    // client端 Top收包流量
    uint32_t m_TopCLRecvSizeNum[2000];
    
    // client端 Top发包流量
    uint32_t m_TopCLSendSizeNum[2000];
    
    // client端 Top收包处理时间
    uint32_t m_TopCLProcessTime[2000];
        
    
    // Top场景人数
    fhashmap<uint32_t, uint32_t, 100> m_TopSceneNum;
    
    // Top副本人数
    fhashmap<uint32_t, uint32_t, 100> m_TopDungeonNum;
        
};
  
// dbsvrd统计结构
class CDBStatMng : public singleton<CDBStatMng>
{
public:
	// dbsvrd统计结构
    CDBStatMng()
	{
		Clear();
	}
	// dbsvrd统计结构
    ~CDBStatMng()
	{
		Clear();
	}
		
	void SortArray(uint32_t * src, int srcSize, uint32_t * desId, uint32_t * desVal, int desSize, bool isMax)
	{
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t max = 0;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] > max)
					{
						desId[i] = j;
						desVal[i] = src[j];
						max = src[j];
					}
				}
				src[desId[i]] = 0;
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t min = 0xFFFFFFFF;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] < min && src[j] > 0)
					{
						desId[i] = j;
						desVal[i] = src[j];
						min = src[j];
					}
				}
				src[desId[i]] = 0xFFFFFFFF;
			}
		}
	}

	template <typename Map>
	void SortHashMap(Map & map, uint32_t * desId, uint32_t * desVal, int desSize, bool isMax)
	{
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t max = 0;
				for (typename Map::iterator it = map.begin(); it != map.end(); it++)
				{
					if (it->second > max)
					{
						desId[i] = it->first;
						desVal[i] = it->second;
						max = it->second;
					}
				}
				typename Map::iterator it = map.find(desId[i]);
				if (it != map.end())
				{
					it->second = 0;
				}
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t min = 0xFFFFFFFF;
				for (typename Map::iterator it = map.begin(); it != map.end(); it++)
				{
					if (it->second < min && it->second > 0)
					{
						desId[i] = it->first;
						desVal[i] = it->second;
						min = it->second;
					}
				}
				typename Map::iterator it = map.find(desId[i]);
				if (it != map.end())
				{
					it->second = 0xFFFFFFFF;
				}
			}
		}
	}
		
// 操作函数
public:
    int PrintLog(const char * strFile)
	{
		FILE *pLog = NULL;
		if ((pLog = fopen(strFile, "a+")) == NULL)
		{
			LOG_ERROR("open %s fail", strFile);
			return -2;
		}
		
		
		// Top DBExecutor帧率
		uint32_t uTopExecutorFPSId[5] = {0};
		uint32_t uTopExecutorFPSVal[5] = {0};
		SortArray(m_TopExecutorFPS, 100, uTopExecutorFPSId, uTopExecutorFPSVal, 5, false);
		
		
		
		fprintf(pLog, "=============================%s=============================\n"
			
			// 系统负荷
			"LoadAvg\t%u\t系统负荷\n"
			
			// cpu占用
			"CPU\t%u\tcpu占用\n"
			
			// 当前进程的cpu占用
			"CurCPU\t%u\t当前进程的cpu占用\n"
			
			// 物理内存占用
			"RES\t%u\t物理内存占用\n"
			
			// 虚拟内存占用
			"VIRT\t%u\t虚拟内存占用\n"
			
			// 帧率
			"FPS\t%u\t帧率\n"
			
			
			
			// 每个Handle帧率 0
			"PerHandleFPS0\t%u\t每个Handle帧率0\n"
			
			// 每个Handle帧率 1
			"PerHandleFPS1\t%u\t每个Handle帧率1\n"
			
			// 每个Handle帧率 2
			"PerHandleFPS2\t%u\t每个Handle帧率2\n"
			
			// 每个Handle帧率 3
			"PerHandleFPS3\t%u\t每个Handle帧率3\n"
			
			// 每个Handle帧率 4
			"PerHandleFPS4\t%u\t每个Handle帧率4\n"
			
			// 每个Handle帧率 5
			"PerHandleFPS5\t%u\t每个Handle帧率5\n"
			
			// 每个Handle帧率 6
			"PerHandleFPS6\t%u\t每个Handle帧率6\n"
			
			// 每个Handle帧率 7
			"PerHandleFPS7\t%u\t每个Handle帧率7\n"
			
			
			
			
			// Top DBExecutor帧率 0
			"TopExecutorFPSId0\t%u\tTop DBExecutor帧率Id0\nTopExecutorFPSVal0\t%u\tTop DBExecutor帧率Val0\n"
			
			// Top DBExecutor帧率 1
			"TopExecutorFPSId1\t%u\tTop DBExecutor帧率Id1\nTopExecutorFPSVal1\t%u\tTop DBExecutor帧率Val1\n"
			
			// Top DBExecutor帧率 2
			"TopExecutorFPSId2\t%u\tTop DBExecutor帧率Id2\nTopExecutorFPSVal2\t%u\tTop DBExecutor帧率Val2\n"
			
			// Top DBExecutor帧率 3
			"TopExecutorFPSId3\t%u\tTop DBExecutor帧率Id3\nTopExecutorFPSVal3\t%u\tTop DBExecutor帧率Val3\n"
			
			// Top DBExecutor帧率 4
			"TopExecutorFPSId4\t%u\tTop DBExecutor帧率Id4\nTopExecutorFPSVal4\t%u\tTop DBExecutor帧率Val4\n"
			
			
			
			"\n"
			
			, (const char *)fclock::ptr()->nowstr()
			
			// 系统负荷
			, m_LoadAvg
			
			// cpu占用
			, m_CPU
			
			// 当前进程的cpu占用
			, m_CurCPU
			
			// 物理内存占用
			, m_RES
			
			// 虚拟内存占用
			, m_VIRT
			
			// 帧率
			, m_FPS
			
			
			
			// 每个Handle帧率 0
			, m_PerHandleFPS[0]
			
			// 每个Handle帧率 1
			, m_PerHandleFPS[1]
			
			// 每个Handle帧率 2
			, m_PerHandleFPS[2]
			
			// 每个Handle帧率 3
			, m_PerHandleFPS[3]
			
			// 每个Handle帧率 4
			, m_PerHandleFPS[4]
			
			// 每个Handle帧率 5
			, m_PerHandleFPS[5]
			
			// 每个Handle帧率 6
			, m_PerHandleFPS[6]
			
			// 每个Handle帧率 7
			, m_PerHandleFPS[7]
			
			
			
			
			// Top DBExecutor帧率 0
			, uTopExecutorFPSId[0], uTopExecutorFPSVal[0]
			
			// Top DBExecutor帧率 1
			, uTopExecutorFPSId[1], uTopExecutorFPSVal[1]
			
			// Top DBExecutor帧率 2
			, uTopExecutorFPSId[2], uTopExecutorFPSVal[2]
			
			// Top DBExecutor帧率 3
			, uTopExecutorFPSId[3], uTopExecutorFPSVal[3]
			
			// Top DBExecutor帧率 4
			, uTopExecutorFPSId[4], uTopExecutorFPSVal[4]
			
			
			
			);
			
		fclose(pLog);
		
		Clear();

		return 0;
	}
    
// 属性操作函数
public:
    
    // Get 系统负荷
    uint32_t & GetLoadAvg()
    {
        return m_LoadAvg;
    }
    
    // Set 系统负荷
    void SetLoadAvg(uint32_t _LoadAvg)
    {
        m_LoadAvg = _LoadAvg;
    }
    
    // Add 系统负荷
    void AddLoadAvg(uint32_t _LoadAvg = 1)
    {
        m_LoadAvg += _LoadAvg;
    }
    
    // Get cpu占用
    uint32_t & GetCPU()
    {
        return m_CPU;
    }
    
    // Set cpu占用
    void SetCPU(uint32_t _CPU)
    {
        m_CPU = _CPU;
    }
    
    // Add cpu占用
    void AddCPU(uint32_t _CPU = 1)
    {
        m_CPU += _CPU;
    }
    
    // Get 当前进程的cpu占用
    uint32_t & GetCurCPU()
    {
        return m_CurCPU;
    }
    
    // Set 当前进程的cpu占用
    void SetCurCPU(uint32_t _CurCPU)
    {
        m_CurCPU = _CurCPU;
    }
    
    // Add 当前进程的cpu占用
    void AddCurCPU(uint32_t _CurCPU = 1)
    {
        m_CurCPU += _CurCPU;
    }
    
    // Get 物理内存占用
    uint32_t & GetRES()
    {
        return m_RES;
    }
    
    // Set 物理内存占用
    void SetRES(uint32_t _RES)
    {
        m_RES = _RES;
    }
    
    // Add 物理内存占用
    void AddRES(uint32_t _RES = 1)
    {
        m_RES += _RES;
    }
    
    // Get 虚拟内存占用
    uint32_t & GetVIRT()
    {
        return m_VIRT;
    }
    
    // Set 虚拟内存占用
    void SetVIRT(uint32_t _VIRT)
    {
        m_VIRT = _VIRT;
    }
    
    // Add 虚拟内存占用
    void AddVIRT(uint32_t _VIRT = 1)
    {
        m_VIRT += _VIRT;
    }
    
    // Get 帧率
    uint32_t & GetFPS()
    {
        return m_FPS;
    }
    
    // Set 帧率
    void SetFPS(uint32_t _FPS)
    {
        m_FPS = _FPS;
    }
    
    // Add 帧率
    void AddFPS(uint32_t _FPS = 1)
    {
        m_FPS += _FPS;
    }
    
    
         
	// Set 每个Handle帧率
    void SetPerHandleFPS(uint32_t index, uint32_t _PerHandleFPS)
    {
		if (index >= 8)
        {
            return;
        }
        m_PerHandleFPS[index] += _PerHandleFPS;
    }
	
    // Add 每个Handle帧率
    void AddPerHandleFPS(uint32_t index, uint32_t _PerHandleFPS = 1)
    {
        if (index >= 8)
        {
            return;
        }
        m_PerHandleFPS[index] += _PerHandleFPS;
    }
    
	
          
	// Set Top DBExecutor帧率
    void SetTopExecutorFPS(uint32_t index, uint32_t _TopExecutorFPS)
    {
		if (index >= 100)
        {
            return;
        }
        m_TopExecutorFPS[index] += _TopExecutorFPS;
    }
	       
    // Add Top DBExecutor帧率
    void AddTopExecutorFPS(uint32_t index, uint32_t _TopExecutorFPS = 1)
    {
        if (index >= 100)
        {
            return;
        }
        m_TopExecutorFPS[index] += _TopExecutorFPS;
    }
    
	
    
    
// 内部函数
private:
    void Clear()
	{
		
		// 系统负荷
		m_LoadAvg = 0;
		
		// cpu占用
		m_CPU = 0;
		
		// 当前进程的cpu占用
		m_CurCPU = 0;
		
		// 物理内存占用
		m_RES = 0;
		
		// 虚拟内存占用
		m_VIRT = 0;
		
		// 帧率
		m_FPS = 0;
		
		
		// 每个Handle帧率
		memset(m_PerHandleFPS, 0, sizeof(m_PerHandleFPS));
		
		
		// Top DBExecutor帧率
		memset(m_TopExecutorFPS, 0, sizeof(m_TopExecutorFPS));
		
		
	}

// 属性
private:
    
    // 系统负荷
    uint32_t m_LoadAvg;
    
    // cpu占用
    uint32_t m_CPU;
    
    // 当前进程的cpu占用
    uint32_t m_CurCPU;
    
    // 物理内存占用
    uint32_t m_RES;
    
    // 虚拟内存占用
    uint32_t m_VIRT;
    
    // 帧率
    uint32_t m_FPS;
    
    
    // 每个Handle帧率
    uint32_t m_PerHandleFPS[8];
    
    
    // Top DBExecutor帧率
    uint32_t m_TopExecutorFPS[100];
        
        
};

