/* This file is generated by genstat. */
/* No manual modification is permitted. */

#pragma once

{{range .}}  
// {{iconv .Comment}}
class C{{.Name}}Mng : public singleton<C{{.Name}}Mng>
{
public:
	// {{iconv .Comment}}
    C{{.Name}}Mng()
	{
		Clear();
	}
	// {{iconv .Comment}}
    ~C{{.Name}}Mng()
	{
		Clear();
	}
		
	void SortArray(uint32_t * src, int srcSize, uint32_t * desId, uint32_t * desVal, int desSize, bool isMax)
	{
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t max = 0;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] > max)
					{
						desId[i] = j;
						desVal[i] = src[j];
						max = src[j];
					}
				}
				src[desId[i]] = 0;
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t min = 0xFFFFFFFF;
				for (int j = 0; j < srcSize; j++)
				{
					if (src[j] < min && src[j] > 0)
					{
						desId[i] = j;
						desVal[i] = src[j];
						min = src[j];
					}
				}
				src[desId[i]] = 0xFFFFFFFF;
			}
		}
	}

	template <typename Map>
	void SortHashMap(Map & map, uint32_t * desId, uint32_t * desVal, int desSize, bool isMax)
	{
		if (isMax)
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t max = 0;
				for (typename Map::iterator it = map.begin(); it != map.end(); it++)
				{
					if (it->second > max)
					{
						desId[i] = it->first;
						desVal[i] = it->second;
						max = it->second;
					}
				}
				typename Map::iterator it = map.find(desId[i]);
				if (it != map.end())
				{
					it->second = 0;
				}
			}
		}
		else
		{
			for (int i = 0; i < desSize; i++)
			{
				desId[i] = 0;
				desVal[i] = 0;
				uint32_t min = 0xFFFFFFFF;
				for (typename Map::iterator it = map.begin(); it != map.end(); it++)
				{
					if (it->second < min && it->second > 0)
					{
						desId[i] = it->first;
						desVal[i] = it->second;
						min = it->second;
					}
				}
				typename Map::iterator it = map.find(desId[i]);
				if (it != map.end())
				{
					it->second = 0xFFFFFFFF;
				}
			}
		}
	}
		
// 操作函数
public:
    int PrintLog(const char * strFile)
	{
		FILE *pLog = NULL;
		if ((pLog = fopen(strFile, "a+")) == NULL)
		{
			LOG_ERROR("open %s fail", strFile);
			return -2;
		}
		
		{{range .TopArrays}}
		// {{iconv .Comment}}
		uint32_t u{{.Name}}Id[{{.Top}}] = {0};
		uint32_t u{{.Name}}Val[{{.Top}}] = {0};
		SortArray(m_{{.Name}}, {{.Length}}, u{{.Name}}Id, u{{.Name}}Val, {{.Top}}, {{if .Cmp}}false{{else}}true{{end}});
		{{end}}
		{{range .HashMaps}}
		// {{iconv .Comment}}
		uint32_t u{{.Name}}Id[{{.Top}}] = {0};
		uint32_t u{{.Name}}Val[{{.Top}}] = {0};
		SortHashMap< fhashmap<uint32_t, uint32_t, {{.Length}}> >(m_{{.Name}}, u{{.Name}}Id, u{{.Name}}Val, {{.Top}}, {{if .Cmp}}false{{else}}true{{end}});
		{{end}}
		
		fprintf(pLog, "=============================%s=============================\n"
			{{range .Members}}
			// {{iconv .Comment}}
			"{{.Name}}\t%u\t{{iconv .Comment}}\n"
			{{end}}
			{{range .Arrays}}{{$comment := iconv .Comment}}{{$name := iconv .Name}}
			{{range $i,$e := genlist .Length}}
			// {{$comment}} {{$i}}
			"{{$name}}{{$i}}\t%u\t{{$comment}}{{$i}}\n"
			{{end}}
			{{end}}
			{{range .TopArrays}}{{$comment := iconv .Comment}}{{$name := iconv .Name}}
			{{range $i,$e := genlist .Top}}
			// {{$comment}} {{$i}}
			"{{$name}}Id{{$i}}\t%u\t{{$comment}}Id{{$i}}\n{{$name}}Val{{$i}}\t%u\t{{$comment}}Val{{$i}}\n"
			{{end}}
			{{end}}
			{{range .HashMaps}}{{$comment := iconv .Comment}}{{$name := iconv .Name}}
			{{range $i,$e := genlist .Top}}
			// {{$comment}} {{$i}}
			"{{$name}}Id{{$i}}\t%u\t{{$comment}}Id{{$i}}\n{{$name}}Val{{$i}}\t%u\t{{$comment}}Val{{$i}}\n"
			{{end}}
			{{end}}
			"\n"
			
			, (const char *)fclock::ptr()->nowstr()
			{{range .Members}}
			// {{iconv .Comment}}
			, m_{{.Name}}
			{{end}}
			{{range .Arrays}}{{$comment := iconv .Comment}}{{$name := .Name}}
			{{range $i,$e := genlist .Length}}
			// {{$comment}} {{$i}}
			, m_{{$name}}[{{$i}}]
			{{end}}
			{{end}}
			{{range .TopArrays}}{{$comment := iconv .Comment}}{{$name := .Name}}
			{{range $i,$e := genlist .Top}}
			// {{$comment}} {{$i}}
			, u{{$name}}Id[{{$i}}], u{{$name}}Val[{{$i}}]
			{{end}}
			{{end}}
			{{range .HashMaps}}{{$comment := iconv .Comment}}{{$name := .Name}}
			{{range $i,$e := genlist .Top}}
			// {{$comment}} {{$i}}
			, u{{$name}}Id[{{$i}}], u{{$name}}Val[{{$i}}]
			{{end}}
			{{end}}
			);
			
		fclose(pLog);
		
		Clear();

		return 0;
	}
    
// 属性操作函数
public:
    {{range .Members}}
    // Get {{iconv .Comment}}
    uint32_t & Get{{.Name}}()
    {
        return m_{{.Name}};
    }
    
    // Set {{iconv .Comment}}
    void Set{{.Name}}(uint32_t _{{.Name}})
    {
        m_{{.Name}} = {{if eq .Cmp "max"}}_{{.Name}} > m_{{.Name}} ? _{{.Name}} : m_{{.Name}}{{else if eq .Cmp "min"}}_{{.Name}} < m_{{.Name}} ? _{{.Name}} : m_{{.Name}}{{else}}_{{.Name}}{{end}};
    }
    
    {{if not .Cmp}}// Add {{iconv .Comment}}
    void Add{{.Name}}(uint32_t _{{.Name}} = 1)
    {
        m_{{.Name}} += _{{.Name}};
    }{{end}}
    {{end}}
    
    {{range .Arrays}}     
	// Set {{iconv .Comment}}
    void Set{{.Name}}(uint32_t index, uint32_t _{{.Name}})
    {
		if (index >= {{.Length}})
        {
            return;
        }
        m_{{.Name}}[index] += _{{.Name}};
    }
	
    // Add {{iconv .Comment}}
    void Add{{.Name}}(uint32_t index, uint32_t _{{.Name}} = 1)
    {
        if (index >= {{.Length}})
        {
            return;
        }
        m_{{.Name}}[index] += _{{.Name}};
    }
    {{end}}
	
    {{range .TopArrays}}      
	// Set {{iconv .Comment}}
    void Set{{.Name}}(uint32_t index, uint32_t _{{.Name}})
    {
		if (index >= {{.Length}})
        {
            return;
        }
        m_{{.Name}}[index] += _{{.Name}};
    }
	       
    // Add {{iconv .Comment}}
    void Add{{.Name}}(uint32_t index, uint32_t _{{.Name}} = 1)
    {
        if (index >= {{.Length}})
        {
            return;
        }
        m_{{.Name}}[index] += _{{.Name}};
    }
    {{end}}
	
    {{range .HashMaps}}     
	// Set {{iconv .Comment}}
    void Set{{.Name}}(uint32_t index, uint32_t _{{.Name}})
    {
		fhashmap<uint32_t, uint32_t, {{.Length}}>::iterator it = m_{{.Name}}.find(index);
        if (it == m_{{.Name}}.end())
        {
            m_{{.Name}}.insert(index, _{{.Name}});
        }
        else
        {
            uint32_t & val = it->second;
            val = _{{.Name}};
        }
    }
	        
    // Add {{iconv .Comment}}
    void Add{{.Name}}(uint32_t index, uint32_t _{{.Name}} = 1)
    {
        fhashmap<uint32_t, uint32_t, {{.Length}}>::iterator it = m_{{.Name}}.find(index);
        if (it == m_{{.Name}}.end())
        {
            m_{{.Name}}.insert(index, _{{.Name}});
        }
        else
        {
            uint32_t & val = it->second;
            val += _{{.Name}};
        }
    }
    {{end}}
    
// 内部函数
private:
    void Clear()
	{
		{{range .Members}}
		// {{iconv .Comment}}
		m_{{.Name}} = 0;
		{{end}}
		{{range .Arrays}}
		// {{iconv .Comment}}
		memset(m_{{.Name}}, 0, sizeof(m_{{.Name}}));
		{{end}}
		{{range .TopArrays}}
		// {{iconv .Comment}}
		memset(m_{{.Name}}, 0, sizeof(m_{{.Name}}));
		{{end}}
		{{range .HashMaps}}
		// {{iconv .Comment}}
		m_{{.Name}}.clear();
		{{end}}
	}

// 属性
private:
    {{range .Members}}
    // {{iconv .Comment}}
    uint32_t m_{{.Name}};
    {{end}}
    {{range .Arrays}}
    // {{iconv .Comment}}
    uint32_t m_{{.Name}}[{{.Length}}];
    {{end}}
    {{range .TopArrays}}
    // {{iconv .Comment}}
    uint32_t m_{{.Name}}[{{.Length}}];
    {{end}}    
    {{range .HashMaps}}
    // {{iconv .Comment}}
    fhashmap<uint32_t, uint32_t, {{.Length}}> m_{{.Name}};
    {{end}}    
};
{{end}}
